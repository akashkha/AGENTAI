[
  {
    "role": "user",
    "message": "help",
    "timestamp": "2025-10-29T10:57:25.768302"
  },
  {
    "role": "bot",
    "message": "Here's how you can interact with me:\n\n- Ask for questions: 'Show me TCS interview questions for 2 years experience'\n- View categories: 'What categories of questions do you have?'\n- List companies: 'Which companies do you have questions for?'\n- Get specific: 'Show me Selenium questions for Microsoft'\n- Filter by difficulty: 'Show me advanced questions for Amazon'\n\nYou can also combine these: 'Show me advanced Selenium questions for TCS with 3 years experience'",
    "timestamp": "2025-10-29T10:57:25.768367"
  },
  {
    "role": "user",
    "message": "show me tcs interview questions for 2 years experience'",
    "timestamp": "2025-10-29T10:57:49.755955"
  },
  {
    "role": "bot",
    "message": "\nInterview Questions for TCS (0-2 years experience):\n====================================================================================================\n\n1. Question: Explain TestNG annotations and their execution order\n   Category: TestNG\n   Difficulty: Basic\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   @BeforeSuite -> @BeforeTest -> @BeforeClass -> @BeforeMethod -> @Test -> @AfterMethod -> @AfterClass -> @AfterTest -> @AfterSuite\n\n   Follow-up Question: How do you handle test dependencies in TestNG?\n   Follow-up Answer:\n   Use @Test(dependsOnMethods = {\"methodName\"}) to specify dependencies. You can also use dependsOnGroups for group dependencies.\n\n----------------------------------------------------------------------------------------------------\n\n2. Question: How do you handle dynamic web tables in Selenium?\n   Category: Selenium\n   Difficulty: Medium\n   Asked in: 2025-09\n   Type: Technical\n\n   Answer:\n   1. Use FindElements to get all rows/columns\n2. Iterate through rows to find specific data\n3. Use XPath or CSS with dynamic locators\n4. Store data in a List or Map for verification\n\n   Follow-up Question: What are the different ways to locate elements in a web table?\n   Follow-up Answer:\n   1. XPath: //table//tr[row]/td[column]\n2. CSS: table tr:nth-child(row) td:nth-child(column)\n3. Custom functions using row/column text\n\n----------------------------------------------------------------------------------------------------\n\n3. Question: What is Page Object Model and why is it used?\n   Category: Framework Design\n   Difficulty: Medium\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   POM is a design pattern where web pages are represented as classes, and elements as properties. Benefits:\n1. Code reusability\n2. Better maintenance\n3. Object-oriented approach\n4. Separation of page logic and test logic\n\n   Follow-up Question: What is the difference between Page Factory and POM?\n   Follow-up Answer:\n   Page Factory is an optimized way to implement POM. It uses @FindBy annotations and initElements() method to initialize elements, reducing code and improving performance.\n\n----------------------------------------------------------------------------------------------------\n\n4. Question: Explain different types of waits in Selenium\n   Category: Selenium\n   Difficulty: Basic\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   1. Implicit Wait: Global timeout for all elements\n2. Explicit Wait: Wait for specific condition\n3. Fluent Wait: Similar to explicit wait but with polling interval\n4. Thread.sleep(): Static wait (not recommended)\n\n   Follow-up Question: When would you use Explicit Wait over Implicit Wait?\n   Follow-up Answer:\n   Use Explicit Wait when:\n1. Specific elements need different timeout\n2. Need to wait for specific conditions\n3. Want to avoid SynchronizationException\n\n----------------------------------------------------------------------------------------------------\n\n5. Question: How do you handle different types of popups in Selenium?\n   Category: Selenium\n   Difficulty: Medium\n   Asked in: 2025-09\n   Type: Technical\n\n   Answer:\n   1. Alert: switchTo().alert() methods\n2. Window popup: getWindowHandles()\n3. Frame: switchTo().frame()\n4. Bootstrap/HTML popup: regular element handling\n\n   Follow-up Question: How do you handle authentication popups?\n   Follow-up Answer:\n   1. Using AutoIT\n2. Robot class\n3. Pass credentials in URL: https://username:password@url.com\n4. Using capabilities.setCapability(\"username\", \"password\")\n\n----------------------------------------------------------------------------------------------------\n\n6. Question: What are different types of frameworks in automation?\n   Category: Framework Design\n   Difficulty: Medium\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   1. Data-Driven Framework\n2. Keyword-Driven Framework\n3. Hybrid Framework\n4. Behavior Driven Development Framework\n5. Linear Scripting Framework\n\n   Follow-up Question: Which framework would you choose for a new project and why?\n   Follow-up Answer:\n   Hybrid Framework combining POM with BDD because:\n1. Business-readable specifications\n2. Reusable page objects\n3. Data-driven capabilities\n4. Easy maintenance\n\n----------------------------------------------------------------------------------------------------\n\n7. Question: Explain TestNG listeners and their uses\n   Category: TestNG\n   Difficulty: Medium\n   Asked in: 2025-09\n   Type: Technical\n\n   Answer:\n   Listeners implement ITestListener interface. Common uses:\n1. Taking screenshots on failure\n2. Custom reporting\n3. Retry failed tests\n4. Logging test execution details\n\n   Follow-up Question: How do you implement IRetryAnalyzer?\n   Follow-up Answer:\n   1. Create class implementing IRetryAnalyzer\n2. Override retry method with retry logic\n3. Add retryAnalyzer to @Test annotation\n4. Track retry count in implementation\n\n----------------------------------------------------------------------------------------------------\n\n8. Question: How do you handle iframes in Selenium?\n   Category: Selenium\n   Difficulty: Basic\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   Use switchTo().frame() methods:\n1. By index\n2. By name/ID\n3. By WebElement\n4. switchTo().defaultContent() to exit frame\n\n   Follow-up Question: How do you handle nested iframes?\n   Follow-up Answer:\n   Switch to frames in sequence:\n1. switchTo().frame(\"parent\")\n2. switchTo().frame(\"child\")\n3. Perform actions\n4. switchTo().defaultContent()\n\n----------------------------------------------------------------------------------------------------\n\n9. Question: What are different types of XPath?\n   Category: Selenium\n   Difficulty: Basic\n   Asked in: 2025-09\n   Type: Technical\n\n   Answer:\n   1. Absolute XPath: Starts from root (/html/body/...)\n2. Relative XPath: Starts from any node (//element)\n3. XPath axes: following, ancestor, etc.\n4. XPath functions: contains(), text(), etc.\n\n   Follow-up Question: What are XPath axes and when to use them?\n   Follow-up Answer:\n   XPath axes help navigate XML document:\n1. following-sibling: Find next elements\n2. preceding: Find previous elements\n3. ancestor: Find parent elements\n4. descendant: Find child elements\n\n----------------------------------------------------------------------------------------------------\n\n10. Question: How do you handle SSL certificates in Selenium?\n   Category: Selenium\n   Difficulty: Medium\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   1. Using DesiredCapabilities:\n   capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true)\n2. Using ChromeOptions:\n   options.setAcceptInsecureCerts(true)\n\n   Follow-up Question: What are other important capabilities in Selenium?\n   Follow-up Answer:\n   1. platformName\n2. browserVersion\n3. setHeadless\n4. proxy settings\n5. unhandledPromptBehavior\n\n----------------------------------------------------------------------------------------------------\n\n11. Question: Explain different assertions in TestNG\n   Category: TestNG\n   Difficulty: Basic\n   Asked in: 2025-09\n   Type: Technical\n\n   Answer:\n   1. Hard Assert: Stops execution on failure\n2. Soft Assert: Continues execution\n3. assertEquals()\n4. assertTrue()\n5. assertNotNull()\n\n   Follow-up Question: How do you use SoftAssert?\n   Follow-up Answer:\n   1. Create SoftAssert object\n2. Use assertion methods\n3. Call assertAll() at end\n4. Handle multiple verifications\n\n----------------------------------------------------------------------------------------------------\n\n12. Question: How do you handle Ajax calls in Selenium?\n   Category: Selenium\n   Difficulty: Medium\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   1. Use WebDriverWait with ExpectedConditions\n2. Wait for specific elements\n3. Check jQuery.active == 0\n4. Use JavascriptExecutor to verify state\n\n   Follow-up Question: How do you verify Ajax responses?\n   Follow-up Answer:\n   1. Use browser developer tools\n2. Selenium Wire for network traffic\n3. Custom JavaScript execution\n4. Wait for specific DOM changes\n\n----------------------------------------------------------------------------------------------------\n\n13. Question: How do you handle parallel execution in TestNG?\n   Category: TestNG\n   Difficulty: Advanced\n   Asked in: 2025-09\n   Type: Technical\n\n   Answer:\n   1. Use parallel attribute in testng.xml\n2. Set thread-count\n3. Use @Test(threadPoolSize)\n4. Handle thread-safe resources\n\n   Follow-up Question: How do you handle data sharing in parallel execution?\n   Follow-up Answer:\n   1. Use ThreadLocal variables\n2. Synchronized methods\n3. Atomic variables\n4. Independent test data\n\n----------------------------------------------------------------------------------------------------\n\n14. Question: Explain your approach to handle StaleElementReferenceException\n   Category: Selenium\n   Difficulty: Medium\n   Asked in: 2025-10\n   Type: Technical\n\n   Answer:\n   1. Refresh element reference\n2. Create custom wait condition\n3. Use try-catch with retry\n4. Implement custom ExpectedCondition\n\n   Follow-up Question: How do you prevent StaleElementReferenceException?\n   Follow-up Answer:\n   1. Use WebDriverWait\n2. Refresh page elements\n3. Store element properties\n4. Implement retry mechanism\n\n----------------------------------------------------------------------------------------------------\n\nAvailable Categories:\nJava: Core, Collections, Streams, Multithreading, Design Patterns\nSelenium: Locators, Waits, Actions, Frames, Windows, Alerts\nTestNG: Annotations, Assertions, Parallel, Parameters, Listeners\nFramework Design: POM, Data-Driven, Keyword-Driven, Hybrid, BDD\nAPI Testing: REST, SOAP, GraphQL, Postman, RestAssured\nMobile Testing: Appium, Mobile Web, Native Apps, Hybrid Apps\nDevOps: Jenkins, Docker, Git, Maven, Continuous Testing\nPerformance: JMeter, LoadRunner, Gatling, Performance Metrics\nDatabase: SQL, JDBC, Database Testing, Data Validation\nSecurity: OWASP, Penetration Testing, Security Tools\n",
    "timestamp": "2025-10-29T10:57:49.756292"
  },
  {
    "role": "user",
    "message": "exit",
    "timestamp": "2025-10-29T10:58:14.039532"
  }
]