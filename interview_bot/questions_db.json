{
  "sources": {
    "GLASSDOOR": "Questions reported by interview candidates on Glassdoor",
    "INDEED": "Questions from Indeed company reviews and interviews",
    "REDDIT": "Questions shared on r/QAEngineers and r/softwaretesting",
    "LEETCODE": "Common automation testing problems from LeetCode",
    "COMPANY_REPORTS": "Direct company interview reports"
  },
  "companies": {
    "Google": {
      "0-2": [
        {
          "question": "How do you handle parallel execution in TestNG?",
          "category": "TestNG",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Parallel execution in TestNG:\n1. Configure parallel attribute in testng.xml\n2. Set thread-count\n3. Use @Test(threadPoolSize)\n4. Handle thread-safe resources\n5. Configure data providers",
          "followup": "How do you handle data sharing between parallel tests?",
          "followup_answer": "Data sharing in parallel tests:\n1. Use ThreadLocal variables\n2. Implement synchronized methods\n3. Use concurrent collections\n4. Avoid static variables\n5. Use proper test isolation"
        }
      ],
      "2-5": [
        {
          "question": "Design a test automation framework for a large-scale web application",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Framework design components:\n1. Core Engine: Selenium WebDriver setup\n2. Page Objects: Modular page representations\n3. Test Data: External data sources\n4. Reporting: Custom reports with logs\n5. CI/CD Integration\n6. Cross-browser support\n7. Parallel execution",
          "followup": "How would you handle scalability challenges?",
          "followup_answer": "Scalability solutions:\n1. Containerization\n2. Grid setup\n3. Cloud integration\n4. Resource optimization\n5. Load balancing"
        }
      ]
    },
    "Facebook": {
      "0-2": [
        {
          "question": "Explain your approach to testing infinite scroll",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Testing infinite scroll:\n1. Scroll using JavaScript\n2. Monitor DOM changes\n3. Implement smart waits\n4. Track loaded elements\n5. Handle performance aspects",
          "followup": "How do you verify content after scrolling?",
          "followup_answer": "Content verification:\n1. Element presence checks\n2. Data consistency validation\n3. Performance metrics\n4. Memory usage monitoring\n5. Error handling"
        }
      ],
      "2-5": [
        {
          "question": "How do you implement visual regression testing?",
          "category": "Visual Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Visual regression implementation:\n1. Baseline image capture\n2. Comparison algorithms\n3. Tolerance settings\n4. CI/CD integration\n5. Report generation",
          "followup": "How do you handle dynamic content?",
          "followup_answer": "Dynamic content handling:\n1. Element hiding\n2. Snapshot timing\n3. Region ignoring\n4. State management\n5. Threshold configuration"
        }
      ]
    },
    "Microsoft India": {
      "0-2": [
        {
          "question": "How do you handle iframes in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Handle iframes using:\n1. driver.switchTo().frame() methods\n2. Switch by index, name/ID, or WebElement\n3. Use switchTo().defaultContent() to exit\n4. Handle nested iframes properly",
          "followup": "How to switch between multiple iframes?",
          "followup_answer": "To handle multiple iframes:\n1. Switch to parent frame first\n2. Then switch to child frame\n3. Return to default content when done\n4. Verify frame switching success"
        }
      ],
      "2-5": [
        {
          "question": "Explain your approach to API testing",
          "category": "API Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "API testing approach includes:\n1. Understand API documentation\n2. Plan test scenarios\n3. Setup test environment\n4. Create test data\n5. Write automated tests\n6. Validate responses\n7. Error handling",
          "followup": "How do you handle authentication in API tests?",
          "followup_answer": "Handle API authentication:\n1. Basic auth implementation\n2. OAuth token management\n3. API key handling\n4. Custom headers\n5. Session management"
        }
      ]
    },
    "Amazon India": {
      "0-2": [
        {
          "question": "How do you handle dynamic elements?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Handle dynamic elements using:\n1. Dynamic XPath/CSS selectors\n2. Explicit waits\n3. JavaScript execution\n4. Custom expected conditions\n5. Parent-child relationships",
          "followup": "What are different ways to handle StaleElementException?",
          "followup_answer": "Handle StaleElementException:\n1. Refresh element reference\n2. Implement retry mechanism\n3. Use WebDriverWait\n4. Catch and handle exception"
        }
      ],
      "2-5": [
        {
          "question": "Explain your experience with BDD framework",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "BDD framework implementation:\n1. Use Cucumber/SpecFlow\n2. Write feature files\n3. Implement step definitions\n4. Create page objects\n5. Handle test data\n6. Generate reports",
          "followup": "How do you integrate Cucumber with Selenium?",
          "followup_answer": "Cucumber-Selenium integration:\n1. Setup dependencies\n2. Create feature files\n3. Write step definitions\n4. Implement page objects\n5. Handle hooks and config"
        }
      ]
    },
    "Mastercard": {
      "0-2": [
        {
          "question": "How do you handle API testing for payment transactions?",
          "category": "API Testing",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "For payment API testing:\n1. Use proper test data (test card numbers)\n2. Implement secure authentication\n3. Test response codes and error scenarios\n4. Verify transaction states\n5. Handle encryption/decryption\n6. Test transaction rollbacks\n7. Validate security headers",
          "followup": "How do you handle sensitive data in API tests?",
          "followup_answer": "Handle sensitive data by:\n1. Using environment variables\n2. Implementing data masking\n3. Using secure vaults\n4. Encryption for stored data\n5. Cleanup test data after execution"
        }
      ]
    },
    "TCS": {
      "0-2": [
        {
          "question": "What are TestNG listeners?",
          "category": "TestNG",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "TestNG listeners are interfaces that modify TestNG's default behavior. Common uses include:\n1. Taking screenshots on failure\n2. Custom reporting\n3. Retry failed tests\n4. Logging test execution details",
          "followup": "How do you implement IRetryAnalyzer?",
          "followup_answer": "To implement IRetryAnalyzer:\n1. Create a class implementing IRetryAnalyzer\n2. Override retry() method\n3. Add retryAnalyzer parameter to @Test\n4. Track retry count in implementation"
        }
      ]
    },
    "Infosys": {
      "0-2": [
        {
          "question": "What are the different types of waits in Selenium?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Types of waits in Selenium:\n1. Implicit Wait: Global timeout\n2. Explicit Wait: Condition-based\n3. Fluent Wait: Custom polling\n4. PageLoadTimeout: Page load\n5. ScriptTimeout: JS execution",
          "followup": "When would you use explicit wait over implicit wait?",
          "followup_answer": "Use explicit wait when:\n1. Specific element conditions\n2. Dynamic loading scenarios\n3. Ajax calls completion\n4. Custom wait conditions"
        }
      ],
      "2-5": [
        {
          "question": "Explain the architecture of a hybrid automation framework",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Hybrid framework architecture:\n1. Keyword-Driven layer\n2. Data-Driven capabilities\n3. Page Object Model\n4. Custom utilities\n5. Reporting module",
          "followup": "How do you handle cross-browser testing?",
          "followup_answer": "Cross-browser implementation:\n1. WebDriver manager\n2. Browser factories\n3. Configuration handling\n4. Parallel execution\n5. Grid integration"
        }
      ]
    }
  },
  "categories": {
    "Selenium": ["Web Testing", "Locators", "WebDriver", "Actions", "Waits"],
    "API Testing": ["REST", "SOAP", "GraphQL", "Security", "Performance"],
    "TestNG": ["Annotations", "Assertions", "Parallel", "Listeners", "DataProvider"],
    "Framework Design": ["POM", "Data-Driven", "Keyword-Driven", "BDD", "Hybrid"],
    "Performance": ["JMeter", "Load Testing", "Stress Testing", "Monitoring", "Analysis"]
  },
  "difficulty_levels": {
    "Basic": "Fundamental concepts and simple implementations",
    "Medium": "Advanced concepts and moderate implementations",
    "Advanced": "Complex scenarios and expert-level implementations"
  }
}