{
  "sources": {
    "GLASSDOOR": "Questions reported by interview candidates on Glassdoor",
    "INDEED": "Questions from Indeed company reviews and interviews",
    "REDDIT": "Questions shared on r/QAEngineers and r/softwaretesting",
    "LEETCODE": "Common automation testing problems from LeetCode",
    "COMPANY_REPORTS": "Direct company interview reports"
  },
  "companies": {
    "Mastercard": {
      "0-2": [
        {
          "question": "How do you handle API testing for payment transactions?",
          "category": "API Testing",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "For payment API testing:
1. Use proper test data (test card numbers)
2. Implement secure authentication
3. Test response codes and error scenarios
4. Verify transaction states
5. Handle encryption/decryption
6. Test transaction rollbacks
7. Validate security headers",
          "followup": "How do you handle sensitive data in API tests?",
          "followup_answer": "Handle sensitive data by:
1. Using environment variables
2. Implementing data masking
3. Using secure vaults
4. Encryption for stored data
5. Cleanup test data after execution"
        },
        {
          "question": "Explain your approach to performance testing payment gateways",
          "category": "Performance Testing",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Performance testing approach:
1. Define test scenarios (peak loads, stress)
2. Use JMeter/Gatling for load testing
3. Monitor response times
4. Test concurrent transactions
5. Measure TPS (Transactions Per Second)
6. Analyze throughput metrics
7. Test failover scenarios",
          "followup": "What metrics do you consider most important?",
          "followup_answer": "Key metrics include:
1. Response time percentiles
2. Transaction success rate
3. Error rate under load
4. System resource utilization
5. Concurrent user capacity"
        },
        {
          "question": "How do you ensure security in your automation framework?",
          "category": "Security Testing",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Security implementation:
1. Encrypt test data
2. Secure credential management
3. Implement role-based access
4. Regular security scans
5. SSL/TLS validation
6. Input validation testing
7. Session management tests",
          "followup": "How do you handle penetration testing?",
          "followup_answer": "Penetration testing approach:
1. Use OWASP guidelines
2. Implement vulnerability scans
3. Test injection attacks
4. Verify authentication bypass
5. Check authorization levels"
        }
      ],
      "2-5": [
        {
          "question": "Design a test automation framework for a payment processing system",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "System Design",
          "answer": "Framework design considerations:
1. Multi-layer architecture:
   - API testing layer
   - Security testing layer
   - Performance testing layer
   - UI testing layer
2. Core components:
   - Test data management
   - Security protocols
   - Reporting system
   - CI/CD integration
3. Advanced features:
   - Parallel execution
   - Cross-border testing
   - Currency conversion
   - Compliance checks",
          "followup": "How do you handle test data for different regions?",
          "followup_answer": "Regional test data:
1. Data segregation by region
2. Currency-specific test cases
3. Compliance requirements by country
4. Local payment methods
5. Regional test environments"
        },
        {
          "question": "Explain your experience with microservices testing in payment systems",
          "category": "API Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Microservices testing approach:
1. Service isolation testing
2. Contract testing
3. Integration testing
4. End-to-end scenarios
5. Fault injection testing
6. Circuit breaker testing
7. Service virtualization",
          "followup": "How do you handle service dependencies?",
          "followup_answer": "Handle dependencies by:
1. Using service mocks
2. Implementing stubs
3. Contract testing
4. Feature toggles
5. Environment segregation"
        },
        {
          "question": "How do you implement continuous testing in a financial system?",
          "category": "DevOps",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Continuous testing implementation:
1. Automated pipeline stages:
   - Unit testing
   - Integration testing
   - Security scanning
   - Performance testing
2. Quality gates:
   - Code coverage
   - Security compliance
   - Performance benchmarks
3. Monitoring:
   - Test metrics
   - Environment health
   - Security alerts",
          "followup": "How do you handle test data in CI/CD?",
          "followup_answer": "CI/CD test data management:
1. Automated data seeding
2. Data cleanup post-execution
3. Environment refresh
4. Data versioning
5. Secure data handling"
        }
      ]
    },
    "TCS": {
      "0-2": [
        {
          "question": "Explain TestNG annotations and their execution order",
          "category": "TestNG",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "@BeforeSuite -> @BeforeTest -> @BeforeClass -> @BeforeMethod -> @Test -> @AfterMethod -> @AfterClass -> @AfterTest -> @AfterSuite",
          "followup": "How do you handle test dependencies in TestNG?",
          "followup_answer": "Use @Test(dependsOnMethods = {\"methodName\"}) to specify dependencies. You can also use dependsOnGroups for group dependencies."
        },
        {
          "question": "How do you handle dynamic web tables in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "1. Use FindElements to get all rows/columns\n2. Iterate through rows to find specific data\n3. Use XPath or CSS with dynamic locators\n4. Store data in a List or Map for verification",
          "followup": "What are the different ways to locate elements in a web table?",
          "followup_answer": "1. XPath: //table//tr[row]/td[column]\n2. CSS: table tr:nth-child(row) td:nth-child(column)\n3. Custom functions using row/column text"
        },
        {
          "question": "What is Page Object Model and why is it used?",
          "category": "Framework Design",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "POM is a design pattern where web pages are represented as classes, and elements as properties. Benefits:\n1. Code reusability\n2. Better maintenance\n3. Object-oriented approach\n4. Separation of page logic and test logic",
          "followup": "What is the difference between Page Factory and POM?",
          "followup_answer": "Page Factory is an optimized way to implement POM. It uses @FindBy annotations and initElements() method to initialize elements, reducing code and improving performance."
        },
        {
          "question": "Explain different types of waits in Selenium",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "1. Implicit Wait: Global timeout for all elements\n2. Explicit Wait: Wait for specific condition\n3. Fluent Wait: Similar to explicit wait but with polling interval\n4. Thread.sleep(): Static wait (not recommended)",
          "followup": "When would you use Explicit Wait over Implicit Wait?",
          "followup_answer": "Use Explicit Wait when:\n1. Specific elements need different timeout\n2. Need to wait for specific conditions\n3. Want to avoid SynchronizationException"
        },
        {
          "question": "How do you handle different types of popups in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "1. Alert: switchTo().alert() methods\n2. Window popup: getWindowHandles()\n3. Frame: switchTo().frame()\n4. Bootstrap/HTML popup: regular element handling",
          "followup": "How do you handle authentication popups?",
          "followup_answer": "1. Using AutoIT\n2. Robot class\n3. Pass credentials in URL: https://username:password@url.com\n4. Using capabilities.setCapability(\"username\", \"password\")"
        },
        {
          "question": "What are different types of frameworks in automation?",
          "category": "Framework Design",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "1. Data-Driven Framework\n2. Keyword-Driven Framework\n3. Hybrid Framework\n4. Behavior Driven Development Framework\n5. Linear Scripting Framework",
          "followup": "Which framework would you choose for a new project and why?",
          "followup_answer": "Hybrid Framework combining POM with BDD because:\n1. Business-readable specifications\n2. Reusable page objects\n3. Data-driven capabilities\n4. Easy maintenance"
        },
        {
          "question": "Explain TestNG listeners and their uses",
          "category": "TestNG",
          "difficulty": "Medium",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "Listeners implement ITestListener interface. Common uses:\n1. Taking screenshots on failure\n2. Custom reporting\n3. Retry failed tests\n4. Logging test execution details",
          "followup": "How do you implement IRetryAnalyzer?",
          "followup_answer": "1. Create class implementing IRetryAnalyzer\n2. Override retry method with retry logic\n3. Add retryAnalyzer to @Test annotation\n4. Track retry count in implementation"
        },
        {
          "question": "How do you handle iframes in Selenium?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Use switchTo().frame() methods:\n1. By index\n2. By name/ID\n3. By WebElement\n4. switchTo().defaultContent() to exit frame",
          "followup": "How do you handle nested iframes?",
          "followup_answer": "Switch to frames in sequence:\n1. switchTo().frame(\"parent\")\n2. switchTo().frame(\"child\")\n3. Perform actions\n4. switchTo().defaultContent()"
        },
        {
          "question": "What are different types of XPath?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "1. Absolute XPath: Starts from root (/html/body/...)\n2. Relative XPath: Starts from any node (//element)\n3. XPath axes: following, ancestor, etc.\n4. XPath functions: contains(), text(), etc.",
          "followup": "What are XPath axes and when to use them?",
          "followup_answer": "XPath axes help navigate XML document:\n1. following-sibling: Find next elements\n2. preceding: Find previous elements\n3. ancestor: Find parent elements\n4. descendant: Find child elements"
        },
        {
          "question": "How do you handle SSL certificates in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "1. Using DesiredCapabilities:\n   capabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true)\n2. Using ChromeOptions:\n   options.setAcceptInsecureCerts(true)",
          "followup": "What are other important capabilities in Selenium?",
          "followup_answer": "1. platformName\n2. browserVersion\n3. setHeadless\n4. proxy settings\n5. unhandledPromptBehavior"
        },
        {
          "question": "Explain different assertions in TestNG",
          "category": "TestNG",
          "difficulty": "Basic",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "1. Hard Assert: Stops execution on failure\n2. Soft Assert: Continues execution\n3. assertEquals()\n4. assertTrue()\n5. assertNotNull()",
          "followup": "How do you use SoftAssert?",
          "followup_answer": "1. Create SoftAssert object\n2. Use assertion methods\n3. Call assertAll() at end\n4. Handle multiple verifications"
        },
        {
          "question": "How do you handle Ajax calls in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "1. Use WebDriverWait with ExpectedConditions\n2. Wait for specific elements\n3. Check jQuery.active == 0\n4. Use JavascriptExecutor to verify state",
          "followup": "How do you verify Ajax responses?",
          "followup_answer": "1. Use browser developer tools\n2. Selenium Wire for network traffic\n3. Custom JavaScript execution\n4. Wait for specific DOM changes"
        },
        {
          "question": "How do you handle parallel execution in TestNG?",
          "category": "TestNG",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "1. Use parallel attribute in testng.xml\n2. Set thread-count\n3. Use @Test(threadPoolSize)\n4. Handle thread-safe resources",
          "followup": "How do you handle data sharing in parallel execution?",
          "followup_answer": "1. Use ThreadLocal variables\n2. Synchronized methods\n3. Atomic variables\n4. Independent test data"
        },
        {
          "question": "Explain your approach to handle StaleElementReferenceException",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "1. Refresh element reference\n2. Create custom wait condition\n3. Use try-catch with retry\n4. Implement custom ExpectedCondition",
          "followup": "How do you prevent StaleElementReferenceException?",
          "followup_answer": "1. Use WebDriverWait\n2. Refresh page elements\n3. Store element properties\n4. Implement retry mechanism"
        }
      ],
      "2-5": [
        {
          "question": "Explain your automation framework architecture",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "How do you handle test data management in your framework?"
        },
        {
          "question": "How do you handle parallel execution in your framework?",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "What are the challenges you faced in parallel execution?"
        }
      ]
    },
    "Infosys": {
      "0-2": [
        {
          "question": "What are the different types of waits in Selenium?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "When would you use explicit wait over implicit wait?"
        },
        {
          "question": "How do you handle alerts in Selenium?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "What are the different types of alerts?"
        }
      ],
      "2-5": [
        {
          "question": "Explain data-driven testing framework",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "How do you handle different types of test data?"
        }
      ]
    },
    "Wipro": {
      "0-2": [
        {
          "question": "What is Page Object Model and how do you implement it?",
          "category": "Framework Design",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Page Object Model (POM) is a design pattern where:\n1. Each web page is represented as a Java class\n2. Page elements are defined as private variables with @FindBy annotations\n3. Page actions are defined as public methods\n4. Tests interact only with these public methods\n\nImplementation steps:\n1. Create page classes for each web page\n2. Use @FindBy to locate elements\n3. Initialize elements using PageFactory\n4. Create methods for page actions",
          "followup": "What are the advantages of POM?",
          "followup_answer": "Advantages of POM:\n1. Reusability of code\n2. Easy maintenance\n3. Better readability\n4. Reduced duplication\n5. Encapsulation of page elements\n6. Separation of test logic and page logic"
        },
        {
          "question": "How do you handle dynamic elements in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "To handle dynamic elements:\n1. Use dynamic XPath or CSS selectors\n2. Implement explicit waits\n3. Use partial matches with contains()\n4. Handle dynamic IDs by using starts-with or ends-with\n5. Use parent-child relationships\n6. Implement custom expected conditions",
          "followup": "How do you create dynamic XPath?",
          "followup_answer": "Dynamic XPath strategies:\n1. Use contains(): //input[contains(@id,'dynamic')]\n2. Use starts-with: //div[starts-with(@id,'prefix_')]\n3. Use multiple attributes: //input[@type='text' and contains(@name,'user')]\n4. Use parent-child: //parent-div//child-element"
        },
        {
          "question": "Explain TestNG annotations and priority",
          "category": "TestNG",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "TestNG annotations and their order:\n1. @BeforeSuite\n2. @BeforeTest\n3. @BeforeClass\n4. @BeforeMethod\n5. @Test\n6. @AfterMethod\n7. @AfterClass\n8. @AfterTest\n9. @AfterSuite\n\nPriority:\n- Use @Test(priority=1) to set execution order\n- Lower numbers run first\n- Default priority is 0",
          "followup": "How do you handle dependencies between tests?",
          "followup_answer": "Handle test dependencies using:\n1. @Test(dependsOnMethods={\"methodName\"})\n2. @Test(dependsOnGroups={\"groupName\"})\n3. Use alwaysRun=true for cleanup methods\n4. Handle soft dependencies with enabled=false"
        },
        {
          "question": "How do you implement data-driven testing in Selenium?",
          "category": "Framework Design",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Implement data-driven testing using:\n1. TestNG @DataProvider annotation\n2. Excel data using Apache POI\n3. CSV files using OpenCSV\n4. JSON/XML data files\n5. Database connections\n\nExample:\n```java\n@DataProvider(name=\"testData\")\npublic Object[][] getData() {\n    return new Object[][] {\n        {\"user1\", \"pass1\"},\n        {\"user2\", \"pass2\"}\n    };\n}\n\n@Test(dataProvider=\"testData\")\npublic void loginTest(String user, String pass) {\n    // Test code\n}```",
          "followup": "How do you handle large datasets in data-driven testing?",
          "followup_answer": "Handle large datasets by:\n1. Using parallel execution with @DataProvider(parallel=true)\n2. Implementing data chunking\n3. Using database cursors\n4. Implementing proper cleanup\n5. Managing test data state"
        }
      ],
      "2-5": [
        {
          "question": "How do you implement a hybrid automation framework from scratch?",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "Steps to implement hybrid framework:\n1. Choose core components:\n   - TestNG for test execution\n   - Selenium for web automation\n   - Page Object Model for page representation\n   - Data-driven capabilities\n   - Keyword-driven features\n2. Create framework structure:\n   - Page Objects\n   - Test Base\n   - Utilities\n   - Configuration\n   - Test Data\n   - Test Scripts\n3. Implement core features:\n   - Logging\n   - Reporting\n   - Screenshot capture\n   - Exception handling\n4. Add advanced features:\n   - Parallel execution\n   - Cross-browser testing\n   - CI/CD integration",
          "followup": "How do you handle reporting in your framework?",
          "followup_answer": "Implement reporting using:\n1. ExtentReports for detailed HTML reports\n2. TestNG reports for execution summary\n3. Custom logging for detailed logs\n4. Screenshot attachment for failures\n5. Dashboard for metrics\n6. Email notifications"
        },
        {
          "question": "How do you handle cross-browser testing?",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "answer": "Implement cross-browser testing:\n1. Use WebDriver manager for browser setup\n2. Implement factory pattern for driver initialization\n3. Use TestNG parameters for browser selection\n4. Handle browser-specific code\n5. Use compatibility testing tools\n6. Implement grid for parallel execution",
          "followup": "How do you handle browser compatibility issues?",
          "followup_answer": "Handle compatibility issues by:\n1. Using different locator strategies\n2. Implementing browser-specific waits\n3. Using feature detection\n4. Handling different viewport sizes\n5. Managing browser versions\n6. Using BrowserStack/Sauce Labs"
        },
        {
          "question": "How do you implement API testing in your framework?",
          "category": "API Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "answer": "Implement API testing using:\n1. Rest-Assured for API automation\n2. TestNG for test execution\n3. JSON Schema validation\n4. Response parsing and validation\n5. Authentication handling\n6. Test data management",
          "followup": "How do you handle different types of API authentication?",
          "followup_answer": "Handle API authentication:\n1. Basic Auth using preemptive auth\n2. OAuth 2.0 implementation\n3. Bearer token management\n4. API Key authentication\n5. Session management\n6. Custom authentication headers"
        }
      ]
    },
    "Java Stream Questions": {
      "0-2": [
        {
          "question": "What is a Stream in Java and how is it different from a Collection?",
          "category": "Java",
          "subcategory": "Streams",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "A Stream is a sequence of elements supporting sequential and parallel aggregate operations. Key differences from Collections:\n1. Streams don't store elements - they are computed on demand\n2. Streams operations are lazy - evaluated only when terminal operation is invoked\n3. Streams can't be reused - they are consumed\n4. Streams make bulk operations like filter/map/reduce easier\n5. Streams support parallel operations naturally",
          "followup": "When would you choose Streams over traditional loops?",
          "followup_answer": "Choose Streams when:\n1. Performing data transformations (map/filter)\n2. Need parallel processing\n3. Working with large datasets\n4. Chaining multiple operations\n5. Need cleaner functional-style code"
        },
        {
          "question": "Explain map() vs flatMap() in Java Streams with examples",
          "category": "Java", 
          "subcategory": "Streams",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "map() transforms each element into another element, while flatMap() transforms each element into a stream of elements and flattens them.\n\nExample:\n```java\n// map example\nList<String> words = Arrays.asList(\"hello\", \"world\");\nList<Integer> lengths = words.stream()\n    .map(String::length)\n    .collect(Collectors.toList()); // [5, 5]\n\n// flatMap example \nList<List<Integer>> nested = Arrays.asList(\n    Arrays.asList(1, 2),\n    Arrays.asList(3, 4)\n);\nList<Integer> flattened = nested.stream()\n    .flatMap(Collection::stream)\n    .collect(Collectors.toList()); // [1, 2, 3, 4]\n```",
          "followup": "When would you use flatMap instead of map?",
          "followup_answer": "Use flatMap when:\n1. Working with nested collections\n2. Need to flatten results into a single stream\n3. Processing Optional values\n4. Dealing with one-to-many transformations"
        },
        {
          "question": "Write a stream operation to filter even numbers, square them, and find their sum",
          "category": "Java",
          "subcategory": "Streams",
          "difficulty": "Medium", 
          "date_asked": "2025-10",
          "type": "Coding",
          "source": "COMPANY_REPORTS",
          "answer": "```java\nList<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5, 6);\nint sum = numbers.stream()\n    .filter(n -> n % 2 == 0)    // Keep only even numbers\n    .map(n -> n * n)           // Square them\n    .reduce(0, Integer::sum);   // Sum them up\nSystem.out.println(sum);  // Prints: 56 (4 + 16 + 36)\n```",
          "followup": "How would you modify this to handle parallel processing?",
          "followup_answer": "For parallel processing:\n```java\nint sum = numbers.parallelStream()\n    .filter(n -> n % 2 == 0)\n    .map(n -> n * n)\n    .reduce(0, Integer::sum);\n```\nNote: Consider using proper combining function for reduce in parallel streams."
        }
      ],
      "2-5": [
        {
          "question": "Explain the difference between intermediate and terminal operations in Java Streams",
          "category": "Java",
          "subcategory": "Streams",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS", 
          "answer": "Stream operations are divided into two categories:\n\nIntermediate Operations:\n1. Return a new stream\n2. Are lazy (not executed until terminal operation)\n3. Examples: filter, map, flatMap, distinct, sorted\n4. Can be chained together\n\nTerminal Operations:\n1. Produce a result or side-effect\n2. Trigger stream processing\n3. Examples: collect, reduce, forEach, count\n4. Stream can't be used after terminal operation",
          "followup": "How does lazy evaluation in streams work?",
          "followup_answer": "Lazy evaluation means:\n1. Operations are only performed when needed\n2. Processing starts only with terminal operation\n3. Only required elements are processed\n4. Improves performance by avoiding unnecessary work"
        }
      ]
    },
    "Microsoft India": {
      "0-2": [
        {
          "question": "How do you handle iframes in Selenium?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "How to switch between multiple iframes?"
        }
      ],
      "2-5": [
        {
          "question": "Explain your approach to API testing",
          "category": "API Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "How do you handle authentication in API tests?"
        }
      ]
    },
    "Amazon India": {
      "0-2": [
        {
          "question": "How do you handle dynamic elements?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "What are different ways to handle StaleElementException?"
        }
      ],
      "2-5": [
        {
          "question": "Explain your experience with BDD framework",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "How do you integrate Cucumber with Selenium?"
        }
      ]
    },
    "Flipkart": {
      "0-2": [
        {
          "question": "What are the different types of XPath?",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "What is the difference between absolute and relative XPath?"
        }
      ],
      "2-5": [
        {
          "question": "How do you handle performance testing in your framework?",
          "category": "Performance Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "What tools do you use for performance testing?"
        }
      ]
    },
    "Swiggy": {
      "0-2": [
        {
          "question": "How do you handle dropdowns in Selenium?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "Different ways to select values from dropdown"
        }
      ],
      "2-5": [
        {
          "question": "Explain your mobile testing strategy",
          "category": "Mobile Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "How do you handle different mobile devices and OS versions?"
        }
      ]
    },
    "PhonePe": {
      "0-2": [
        {
          "question": "How do you handle screenshots in Selenium?",
          "category": "Selenium",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "How do you handle failed test case screenshots?"
        }
      ],
      "2-5": [
        {
          "question": "Explain your approach to security testing",
          "category": "Security Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "What tools do you use for security testing?"
        }
      ]
    },
    "Paytm": {
      "0-2": [
        {
          "question": "What are TestNG listeners?",
          "category": "TestNG",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "followup": "How do you implement ITestListener?"
        }
      ],
      "2-5": [
        {
          "question": "How do you handle database testing?",
          "category": "Database Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "followup": "How do you verify database operations in your tests?"
        }
      ]
    },
    "Popular Interview Questions": {
      "0-2": [
        {
          "question": "How do you handle JavaScript alerts in Playwright?",
          "category": "Playwright",
          "difficulty": "Basic",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "In Playwright, handle alerts using page.on('dialog') event:\n1. Set up dialog handler before triggering alert\n2. Use dialog.accept() or dialog.dismiss()\n3. Verify alert message using dialog.message()\n4. Handle different types of dialogs (alert, confirm, prompt)",
          "followup": "How do you handle different types of dialogs?",
          "followup_answer": "Handle using dialog.type():\n1. alert: dialog.accept()\n2. confirm: dialog.accept() or dialog.dismiss()\n3. prompt: dialog.accept(inputText) or dialog.dismiss()\n4. beforeunload: dialog.accept()"
        },
        {
          "question": "How do you handle dynamic loading in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Playwright provides built-in auto-waiting:\n1. waitForSelector() with state options\n2. waitForLoadState() for page loads\n3. waitForResponse() for network requests\n4. Automatic wait for element actionability",
          "followup": "What are the different states in waitForSelector?",
          "followup_answer": "waitForSelector states:\n1. 'attached' - element is present in DOM\n2. 'visible' - element is visible\n3. 'detached' - element is not in DOM\n4. 'hidden' - element is not visible"
        },
        {
          "question": "How do you handle file uploads in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Handle file uploads using setInputFiles:\n1. Use page.setInputFiles() for file input\n2. Support single or multiple files\n3. Can use file paths or buffer data\n4. Handle file cleanup after upload",
          "followup": "How do you handle different types of file inputs?",
          "followup_answer": "Different file upload approaches:\n1. Single file: setInputFiles('input', 'path/to/file')\n2. Multiple files: setInputFiles('input', ['file1', 'file2'])\n3. File buffer: setInputFiles('input', {name, mimeType, buffer})\n4. Empty input: setInputFiles('input', [])"
        },
        {
          "question": "How do you handle iframes in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Handle iframes using frameLocator:\n1. Use page.frameLocator() to target frame\n2. Chain locators for nested frames\n3. Access frame content with locator methods\n4. Switch back to main frame when needed",
          "followup": "How do you handle nested iframes?",
          "followup_answer": "Handle nested frames:\n1. Chain frameLocator calls for each level\n2. Use frame attributes (name, URL) for selection\n3. Wait for frame loading\n4. Handle frame navigation events"
        },
        {
          "question": "How do you handle multi-window testing in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Handle multiple windows:\n1. Use context.waitForEvent('page') for new windows\n2. Get window handle using Promise.all\n3. Switch between pages in context\n4. Close windows after test",
          "followup": "How do you handle popup windows?",
          "followup_answer": "Handle popups:\n1. Listen for popup events\n2. Use page.waitForEvent('popup')\n3. Handle window features and sizing\n4. Manage window lifecycle"
        },
        {
          "question": "How do you perform API testing in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "API testing capabilities:\n1. Use request context for HTTP calls\n2. Handle authentication and headers\n3. Verify response status and body\n4. Mock API responses",
          "followup": "How do you mock API responses?",
          "followup_answer": "Mock API responses:\n1. Use route.fulfill() to mock responses\n2. Intercept specific URLs or patterns\n3. Modify response data\n4. Simulate network conditions"
        },
        {
          "question": "How do you implement data-driven testing in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Implement data-driven tests:\n1. Use test.describe.parallel for parallel runs\n2. Define test data arrays/objects\n3. Use for...of loops with test()\n4. Handle different data scenarios",
          "followup": "How do you handle test data management?",
          "followup_answer": "Manage test data:\n1. External data files (JSON, CSV)\n2. Fixtures for data injection\n3. Environment variables\n4. Data generation utilities"
        },
        {
          "question": "How do you perform visual testing in Playwright?",
          "category": "Playwright",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Visual testing approaches:\n1. Use expect().toHaveScreenshot()\n2. Compare visual elements\n3. Handle dynamic content\n4. Manage screenshot baselines",
          "followup": "How do you handle dynamic content in visual tests?",
          "followup_answer": "Handle dynamic content:\n1. Mask dynamic areas\n2. Use tolerance settings\n3. Stabilize animations\n4. Custom comparison algorithms"
        },
        {
          "question": "How do you handle element states in Playwright?",
          "category": "Playwright",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Handle element states:\n1. Use expect matchers (toBeVisible, toBeEnabled)\n2. Wait for state changes\n3. Check element properties\n4. Handle input states",
          "followup": "What are the different state checks available?",
          "followup_answer": "State checks:\n1. Visibility: toBeVisible(), toBeHidden()\n2. Enable: toBeEnabled(), toBeDisabled()\n3. Selection: toBeChecked(), not.toBeChecked()\n4. Focus: toBeFocused()"
        },
        {
          "question": "How do you handle performance testing in Playwright?",
          "category": "Playwright",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "COMPANY_REPORTS",
          "answer": "Basic performance testing:\n1. Measure page load times\n2. Track network requests\n3. Monitor resource usage\n4. Set performance budgets",
          "followup": "How do you analyze performance metrics?",
          "followup_answer": "Analyze metrics:\n1. Navigation timing API\n2. Resource timing data\n3. Network request timing\n4. Custom performance marks"
        },
        {
          "question": "How do you handle flaky tests in your automation framework?",
          "category": "Framework Design",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Technical",
          "source": "GLASSDOOR",
          "company_reported": ["Google", "Microsoft", "Amazon"],
          "followup": "What strategies do you use to make tests more reliable?"
        },
        {
          "question": "Explain how you would automate an infinite scroll page",
          "category": "Selenium",
          "difficulty": "Medium",
          "date_asked": "2025-09",
          "type": "Technical",
          "source": "INDEED",
          "company_reported": ["Facebook", "LinkedIn"],
          "followup": "How would you handle dynamic loading of elements?"
        },
        {
          "question": "Write a test framework from scratch - what components would you include?",
          "category": "Framework Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "System Design",
          "source": "REDDIT",
          "followup": "How would you handle test data management?"
        }
      ],
      "2-5": [
        {
          "question": "Design a test automation framework for a microservices architecture",
          "category": "System Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "System Design",
          "source": "LEETCODE",
          "company_reported": ["Uber", "Netflix"],
          "followup": "How would you handle service dependencies?"
        },
        {
          "question": "How would you implement automated visual regression testing?",
          "category": "Visual Testing",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Technical",
          "source": "GLASSDOOR",
          "company_reported": ["Airbnb", "Pinterest"],
          "followup": "How do you handle false positives in visual testing?"
        }
      ]
    },
    "Common Coding Challenges": {
      "0-2": [
        {
          "question": "Create a custom Selenium wait condition for a specific scenario",
          "category": "Coding",
          "difficulty": "Medium",
          "date_asked": "2025-10",
          "type": "Coding",
          "source": "LEETCODE",
          "followup": "How would you handle timeout scenarios?"
        },
        {
          "question": "Implement a retry mechanism for flaky tests",
          "category": "Coding",
          "difficulty": "Medium",
          "date_asked": "2025-09",
          "type": "Coding",
          "source": "REDDIT",
          "followup": "How would you log retry attempts?"
        }
      ],
      "2-5": [
        {
          "question": "Design a data-driven test framework with Excel integration",
          "category": "Coding",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "Coding",
          "source": "INDEED",
          "followup": "How would you handle different data types?"
        },
        {
          "question": "Implement a custom test reporter with detailed analytics",
          "category": "Coding",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "Coding",
          "source": "LEETCODE",
          "followup": "How would you handle parallel execution reporting?"
        }
      ]
    },
    "System Design Questions": {
      "2-5": [
        {
          "question": "Design an automated testing pipeline for a large e-commerce application",
          "category": "System Design",
          "difficulty": "Advanced",
          "date_asked": "2025-10",
          "type": "System Design",
          "source": "GLASSDOOR",
          "company_reported": ["Amazon", "Walmart"],
          "followup": "How would you handle test data in different environments?"
        },
        {
          "question": "Design a scalable mobile test automation framework",
          "category": "System Design",
          "difficulty": "Advanced",
          "date_asked": "2025-09",
          "type": "System Design",
          "source": "REDDIT",
          "followup": "How would you handle different mobile platforms and versions?"
        }
      ]
    }
  },
  "categories": {
    "Java": ["Core", "Collections", "Streams", "Multithreading", "Design Patterns"],
    "Selenium": ["Locators", "Waits", "Actions", "Frames", "Windows", "Alerts"],
    "TestNG": ["Annotations", "Assertions", "Parallel", "Parameters", "Listeners"],
    "Framework Design": ["POM", "Data-Driven", "Keyword-Driven", "Hybrid", "BDD"],
    "API Testing": ["REST", "SOAP", "GraphQL", "Postman", "RestAssured"],
    "Mobile Testing": ["Appium", "Mobile Web", "Native Apps", "Hybrid Apps"],
    "DevOps": ["Jenkins", "Docker", "Git", "Maven", "Continuous Testing"],
    "Performance": ["JMeter", "LoadRunner", "Gatling", "Performance Metrics"],
    "Database": ["SQL", "JDBC", "Database Testing", "Data Validation"],
    "Security": ["OWASP", "Penetration Testing", "Security Tools"]
  },
  "difficulty_levels": {
    "Basic": "Fundamental concepts and simple implementations",
    "Medium": "Advanced concepts and moderate implementations",
    "Advanced": "Complex scenarios and expert-level implementations"
  },
  "experience_ranges": {
    "0-2": "Entry level to junior automation engineers",
    "2-5": "Mid-level to senior automation engineers",
    "5+": "Lead and architect level positions"
}
}